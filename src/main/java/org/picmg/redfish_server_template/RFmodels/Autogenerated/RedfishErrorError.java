package org.picmg.redfish_server_template.RFmodels.Autogenerated;

import org.picmg.redfish_server_template.RFmodels.custom.RedfishObject;
import org.springframework.data.mongodb.core.mapping.Field;
import org.bson.types.ObjectId;
import org.springframework.data.annotation.Id;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import javax.validation.Valid;
import javax.validation.constraints.*;

/**
 * The properties that describe an error from a Redfish service.
 */
@ApiModel(description = "The properties that describe an error from a Redfish service.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-10-18T12:30:18.815349018-07:00[America/Phoenix]")

public class RedfishErrorError   {
  @Field("_id")
  @Id
  private ObjectId _id;

  @JsonProperty("@Message.ExtendedInfo")
  @Valid
  private List<Object> atMessageExtendedInfo = null;

  @JsonProperty("code")
  @Field("code")
  private String code;

  @JsonProperty("message")
  @Field("message")
  private String message;

  public RedfishErrorError atMessageExtendedInfo(List<Object> atMessageExtendedInfo) {
    this.atMessageExtendedInfo = atMessageExtendedInfo;
    return this;
  }

  public RedfishErrorError addAtMessageExtendedInfoItem(RedfishObject atMessageExtendedInfoItem) {
    if (this.atMessageExtendedInfo == null) {
      this.atMessageExtendedInfo = new ArrayList<>();
    }
    this.atMessageExtendedInfo.add(atMessageExtendedInfoItem);
    return this;
  }

  /**
   * An array of messages describing one or more error messages.
   * @return atMessageExtendedInfo
  */
  @ApiModelProperty(value = "An array of messages describing one or more error messages.")

  @Valid

  public List<Object> getAtMessageExtendedInfo() {
    return atMessageExtendedInfo;
  }

  public void setAtMessageExtendedInfo(List<Object> atMessageExtendedInfo) {
    this.atMessageExtendedInfo = atMessageExtendedInfo;
  }

  public RedfishErrorError code(String code) {
    this.code = code;
    return this;
  }

  /**
   * A string indicating a specific MessageId from a message registry.
   * @return code
  */
  @ApiModelProperty(required = true, readOnly = true, value = "A string indicating a specific MessageId from a message registry.")
  @NotNull


  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }

  public RedfishErrorError message(String message) {
    this.message = message;
    return this;
  }

  /**
   * A human-readable error message corresponding to the message in a message registry.
   * @return message
  */
  @ApiModelProperty(required = true, readOnly = true, value = "A human-readable error message corresponding to the message in a message registry.")
  @NotNull


  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RedfishErrorError redfishErrorError = (RedfishErrorError) o;
    return Objects.equals(this.atMessageExtendedInfo, redfishErrorError.atMessageExtendedInfo) &&
        Objects.equals(this.code, redfishErrorError.code) &&
        Objects.equals(this.message, redfishErrorError.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atMessageExtendedInfo, code, message);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RedfishErrorError {\n");
    
    sb.append("    atMessageExtendedInfo: ").append(toIndentedString(atMessageExtendedInfo)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

