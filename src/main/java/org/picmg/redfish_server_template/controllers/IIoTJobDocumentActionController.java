//******************************************************************************************************
// AccountController.java
//
// Controller for account service.
//
//Copyright (C) 2022, PICMG.
//
//        This program is free software: you can redistribute it and/or modify
//        it under the terms of the GNU General Public License as published by
//        the Free Software Foundation, either version 3 of the License, or
//        (at your option) any later version.
//
//        This program is distributed in the hope that it will be useful,
//        but WITHOUT ANY WARRANTY; without even the implied warranty of
//        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//        GNU General Public License for more details.
//
//        You should have received a copy of the GNU General Public License
//        along with this program.  If not, see <https://www.gnu.org/licenses/>.
//*******************************************************************************************************

package org.picmg.redfish_server_template.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.bson.Document;
import org.picmg.redfish_server_template.RFmodels.Autogenerated.RedfishError;
import org.picmg.redfish_server_template.RFmodels.custom.RedfishObject;
import org.picmg.redfish_server_template.data_validation.RedfishObjectHandlerMethodArgumentResolver;
import org.picmg.redfish_server_template.repository.RedfishObjectRepository;
import org.picmg.redfish_server_template.services.IIoTJobServiceService;
import org.picmg.redfish_server_template.services.TaskService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletRequest;
import java.util.*;

import static java.lang.Thread.sleep;


@RestController
@RequestMapping(value = {"/redfish/v1/IIoTJobService/Documents/*/Actions/*"})
public class IIoTJobDocumentActionController extends RedfishObjectController {
    @Autowired
    RedfishObjectRepository objectRepository;

    @Autowired
    RedfishObjectHandlerMethodArgumentResolver argumentResolver;

    @Autowired
    IIoTJobServiceService jobServiceService;

    // onActionAdditionalParameterChecking()
    // This method is called after an action's parameters have been checked against the schema (or actionInfo) to
    // perform any additional checks.  Scenarios when this might be needed are when there are interdependencies between
    // parameters or between parameters and the configuration of the associated resource.  This method is intended to be
    // overridden by any object controller classes that need additional parameter checks.  The default behavior is to
    // do nothing.
    //
    // providedParameters - the parameters passed as part of this action request.
    // uri - the uri of the action request.
    // request - the request that was made.
    //
    // returns:
    // a list of redfish errors associated with the parameter checks.  An empty list of no errors are found.
    @Override
    protected List<RedfishError> onActionAdditionalParameterChecking(RedfishObject providedParameters, String uri, HttpServletRequest request) {
        // here, we need to check the parameters field of the post payload against the ParameterMetadata found within
        // the object body.  Because the ParametersMetadata field has the same structure as the ActionInfo Parameters
        // field, we can reuse the ActionInfo methods that already exist.
        // find the parameters key with in the actionInfo resource
        ArrayList<RedfishError> results = new ArrayList<>();

        // first get the resource using the URI
        String resourceUri = uri.substring(0,uri.indexOf("/Actions/"));
        String actionName = uri.substring(uri.indexOf("/Actions/")+9);
        String resourceType = actionName.substring(0,actionName.indexOf("."));
        RedfishObject entity = objectRepository.findFirstWithQuery(Criteria
                .where("_odata_id").is(resourceUri));
        if (entity==null) {
            // resource not found error - this should not happen
            results.add(redfishErrorResponseService.getErrorMessage(
                    "Base",
                    "ResourceNotFound",
                    Collections.singletonList(resourceType),
                    Collections.singletonList(resourceUri)));
            return results;
        }

        // Check to make sure that the ParameterMetadata field exists within the JobDocument.  Again, this
        // should not happen.
        if (!entity.containsKey("ParameterMetadata") || !(entity.get("ParameterMetadata") instanceof ArrayList)) {
            results.add(redfishErrorResponseService.getErrorMessage(
                    "Base",
                    "InternalError",
                    new ArrayList<>(),
                    new ArrayList<>()));
            return results;
        }

        // get the Parameter Metadata from the job document resource
        ArrayList<Document> actionInfoParameters = entity.get("ParameterMetadata", ArrayList.class);

        // Convert the provided parameters to Json
        ObjectMapper mapper = new ObjectMapper();
        JsonNode jsonParameters;
        try {
            jsonParameters = mapper.readTree(providedParameters.toJson());
        } catch (JsonProcessingException e) {
            results.add(redfishErrorResponseService.getErrorMessage(
                    "Base",
                    "InternalError",
                    new ArrayList<>(),
                    new ArrayList<>()));
            return results;
        }

        // Check the parameters given against the parameter metadata
        return argumentResolver.evauateActionParametersAgainstActionInfoParameters(actionName, jsonParameters.get("Parameters"), actionInfoParameters);
    }

    // actionAsyncHandler
    // This method is called by the task service to handle the particular action.  Default behavior does nothing.
    //
    // parameters - the parameters passed to the action from the caller.
    // uri - the uri of the action call
    // request - the complete request that invoked the action
    // taskId - the taskId that will be associated with this action if it is not completed quickly
    // taskService - the task service that invoked this method call.
    //
    // returns - a response to be returned to the calling client
    @Override
    public ResponseEntity<?> actionAsyncHandler(RedfishObject parameters, String uri, HttpServletRequest request, String taskId, TaskService taskService) {
        // create a new Job based on the job document
        // During this call, the job service will perform validation to make sure that the job can be run by at least
        // one of the executors known by the service.
        return jobServiceService.submitNewJob(parameters, uri, request);
    }
}