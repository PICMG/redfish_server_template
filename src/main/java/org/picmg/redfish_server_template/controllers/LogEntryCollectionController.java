//******************************************************************************************************
// EventController.java
//
// Controller for Event service.
//
//Copyright (C) 2022, PICMG.
//
//        This program is free software: you can redistribute it and/or modify
//        it under the terms of the GNU General Public License as published by
//        the Free Software Foundation, either version 3 of the License, or
//        (at your option) any later version.
//
//        This program is distributed in the hope that it will be useful,
//        but WITHOUT ANY WARRANTY; without even the implied warranty of
//        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//        GNU General Public License for more details.
//
//        You should have received a copy of the GNU General Public License
//        along with this program.  If not, see <https://www.gnu.org/licenses/>.
//*******************************************************************************************************

package org.picmg.redfish_server_template.controllers;

import org.picmg.redfish_server_template.RFmodels.Autogenerated.RedfishError;
import org.picmg.redfish_server_template.RFmodels.custom.CachedSchema;
import org.picmg.redfish_server_template.RFmodels.custom.RedfishObject;
import org.picmg.redfish_server_template.data_validation.ValidRedfishObject;
import org.picmg.redfish_server_template.services.EventService;
import org.picmg.redfish_server_template.services.RedfishErrorResponseService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import java.time.Clock;
import java.util.ArrayList;
import java.util.List;


@RestController
@RequestMapping({
        "/redfish/v1/Managers/{ManagerId}/LogServices/{LogServiceId}/Log",
        "/redfish/v1/Systems/{ComputerSystemId}/LogServices/{LogServiceId}/Log",
        "/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/LogServices/{LogServiceId}/Log",
        "/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/LogServices/{LogServiceId}/Log",
        "/redfish/v1/Chassis/{ChassisId}/LogServices/{LogServiceId}/Log",
        "/redfish/v1/JobService/LogService/Log",
        "/redfish/v1/TelemetryService/LogService/Log",
        "/redfish/v1/Systems/{ComputerSystemId}/Memory/{MemoryId}/DeviceLog/Log",
        "/redfish/v1/Chassis/{ChassisId}/PCIeDevices/{PCIeDeviceId}/CXLLogicalDevices/{CXLLogicalDeviceId}/DeviceLog/Log"
})
public class LogEntryCollectionController extends RedfishObjectController {
    @Autowired
    EventService eventService;

    @Autowired
    RedfishErrorResponseService redfishErrorResponseService;

    /* @GetMapping("") - handled by default behavior */

    // onPostCompleteMissingFields()
    //
    // This method is called during an HTTP post request after initial payload has been validated against the schema.
    // It can be assumed that the payload has all required fields for onCreate, but other required fields may be missing.
    // This method completes field data for any required fields and the updated redfish object is returned.
    //
    // The default behavior of this function is to complete the @odata.id, Id, and Name fields.  @odata.type has
    // already been completed. Objects that extend this class should update any other required fields.
    //
    // parameters:
    //    RedfishObject obj -- the object to be posted
    //    HttpServletRequest request -- the post request that was received
    //    CachedSchema schema -- the related schema object for the posted data
    //
    // returns:
    //    RedfishObject with updated fields
    //
    @Override
    protected RedfishObject onPostCompleteMissingFields(RedfishObject obj, HttpServletRequest request, CachedSchema schema) {
        RedfishObject result = super.onPostCompleteMissingFields(obj, request, schema);

        Clock SystemClock = Clock.systemDefaultZone();
        result.put("Created",SystemClock.instant().toString());
        return result;
    }

    // onPostCreationChecks()
    //
    // This method checks the validity of the provided data during a POST operation.
    // It can be assumed that the payload has all required fields populated.
    // This method checks to make sure that all object fields are valid
    //
    // parameters:
    //    RedfishObject obj -- the object to be posted
    //    HttpServletRequest request -- the post request that was received
    //    CachedSchema schema -- the related schema object for the posted data
    //
    // Even though the schema requires only a few fields to be filled out, if any of the fields required for this
    // service are missing, this function will send back the appropriate redfish error.
    //
    // returns:
    //    RedfishError if errors are found, otherwise null
    //
    @Override
    protected RedfishError onPostCreationChecks(RedfishObject obj, HttpServletRequest request, CachedSchema schema) {
        // Check for deprecated values
        if ((!obj.containsKey("EntryType"))||(!obj.getString("EntryType").equals("Event"))) {
            return redfishErrorResponseService.getErrorMessage(
                    "Base",
                    "PropertyValueError",
                    List.of("EntryType"),
                    new ArrayList<>());
        }

        if (!obj.containsKey("Message")) {
            return redfishErrorResponseService.getErrorMessage(
                    "Base",
                    "PropertyMissing",
                    List.of("Message"),
                    new ArrayList<>());
        }

        if (!obj.containsKey("MessageId")) {
            return redfishErrorResponseService.getErrorMessage(
                    "Base",
                    "PropertyMissing",
                    List.of("MessageId"),
                    new ArrayList<>());
        }

        if (!obj.containsKey("MessageArgs")) {
            return redfishErrorResponseService.getErrorMessage(
                    "Base",
                    "PropertyMissing",
                    List.of("MessageArgs"),
                    new ArrayList<>());
        }

        if (!obj.containsKey("Originator")) {
            return redfishErrorResponseService.getErrorMessage(
                    "Base",
                    "PropertyMissing",
                    List.of("Originator"),
                    new ArrayList<>());
        }

        if (!obj.containsKey("OriginatorId")) {
            return redfishErrorResponseService.getErrorMessage(
                    "Base",
                    "PropertyMissing",
                    List.of("OriginatorId"),
                    new ArrayList<>());
        }

        if (!obj.containsKey("Severity")) {
            return redfishErrorResponseService.getErrorMessage(
                    "Base",
                    "PropertyMissing",
                    List.of("Severity"),
                    new ArrayList<>());
        }
        return null;
    }

    // onPostAfterCreation()
    //
    // This method checks is called after the event destination has been created - here, the event service is
    // invoked to create the new event subscription.
    //
    // parameters:
    //    RedfishObject obj -- the eventdestination object
    //    HttpServletRequest request -- the post request that was received
    //    CachedSchema schema -- the related schema object for the posted data
    //
    // returns:
    //    RedfishError if errors are found, otherwise null
    //
    @Override
    protected void onPostAfterCreation(RedfishObject obj, HttpServletRequest ignoredRequest, CachedSchema ignoredSchema) {
        // TODO: eventService.addEvent(obj);
    }

    @Override
    @PostMapping(value = {""})
    public ResponseEntity<?> post(@ValidRedfishObject RedfishObject obj, HttpServletRequest request) {
        return super.post(obj, request);
    }
}
