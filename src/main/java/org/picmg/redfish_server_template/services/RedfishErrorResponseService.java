//******************************************************************************************************
// RedfishErrorResponseService.java
//
// Redfish error response service according to redfish specification.
//
//Copyright (C) 2022, PICMG.
//
//        This program is free software: you can redistribute it and/or modify
//        it under the terms of the GNU General Public License as published by
//        the Free Software Foundation, either version 3 of the License, or
//        (at your option) any later version.
//
//        This program is distributed in the hope that it will be useful,
//        but WITHOUT ANY WARRANTY; without even the implied warranty of
//        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//        GNU General Public License for more details.
//
//        You should have received a copy of the GNU General Public License
//        along with this program.  If not, see <https://www.gnu.org/licenses/>.
//*******************************************************************************************************


package org.picmg.redfish_server_template.services;

import org.picmg.redfish_server_template.RFmodels.Autogenerated.*;
import org.picmg.redfish_server_template.repository.MessageRegistryRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.TreeMap;

@Service
public class RedfishErrorResponseService {

    @Autowired
    MessageRegistryRepository messageRegistryRepository;

    List<MessageRegistry_MessageRegistry> messageRegistryList = null;

    @PostConstruct
    private void initialize() {
        // populate the messageRegistry cache.
        messageRegistryList = messageRegistryRepository.findAll();
    }

    public RedfishError getErrorMessage(String registryPrefix, String messageName, List<String> messageArgs, List<String> relatedProperties) {
        RedfishError redfishError = new RedfishError();
        // find the registry for the requested error message
        for(MessageRegistry_MessageRegistry messageRegistry: messageRegistryList) {
            if(messageRegistry.getRegistryPrefix().equalsIgnoreCase(registryPrefix)) {
                // Registry has been found, now find the requested message
                LinkedHashMap<String,LinkedHashMap<String, String>> messageLinkedHashMap = (LinkedHashMap<String, LinkedHashMap<String, String>>) messageRegistry.getMessages();
                LinkedHashMap<String, String> messageRegistryMessage = messageLinkedHashMap.get(messageName);

                // set the code and message information
                RedfishErrorError redfishErrorError = new RedfishErrorError();
                redfishErrorError.setCode(messageRegistry.getId()+"."+messageName);
                String message = messageRegistryMessage.get("Message");

                // fill in the fields in the message with the error info given
                for (int i=0;i<messageArgs.size();i++) {
                    if (message.contains(" %"+Integer.toString(i+1))) {
                        message = message.replace(
                                " %"+Integer.toString(i+1),
                                " "+messageArgs.get(i));
                    }
                }
                for (int i=0;i<messageArgs.size();i++) {
                    if (message.contains("'%"+Integer.toString(i+1))) {
                        message = message.replace(
                                "'%"+Integer.toString(i+1),
                                "'"+messageArgs.get(i));
                    }
                }
                redfishErrorError.setMessage(message);

                // populate the extended message information from the
                // registry information.
                List<Object> messageExtendedInfoList = new ArrayList<>();
                TreeMap<String, Object> messageExtendedInfo = new TreeMap<>();
                messageExtendedInfo.put("Severity",messageRegistryMessage.get("Severity"));
                messageExtendedInfo.put("MessageSeverity",ResourceHealth.fromValue(messageRegistryMessage.get("MessageSeverity")).toString());
                messageExtendedInfo.put("Resolution",messageRegistryMessage.get("Resolution"));
                messageExtendedInfo.put("MessageId", messageRegistry.getId()+"."+messageName);
                messageExtendedInfo.put("Message", message);
                messageExtendedInfo.put("MessageArgs", messageArgs);
                messageExtendedInfo.put("RelatedProperties",relatedProperties);
                messageExtendedInfoList.add(messageExtendedInfo);
                redfishErrorError.setAtMessageExtendedInfo(messageExtendedInfoList);
                redfishError.setError(redfishErrorError);
            }
        }
        return redfishError;
    }
}
