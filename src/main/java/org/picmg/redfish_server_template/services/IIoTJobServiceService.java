package org.picmg.redfish_server_template.services;

import org.picmg.redfish_server_template.RFmodels.Autogenerated.RedfishError;
import org.picmg.redfish_server_template.RFmodels.custom.RedfishObject;
import org.picmg.redfish_server_template.repository.RedfishObjectRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import javax.servlet.http.HttpServletRequest;
import java.util.ArrayList;

// IIoTJobService
// This class provides the IIoT Job Service.  The primary purpose of this service is to monitor existing job requests
// and send them to available executors to be run.  The job service prioritizes tasks based on the task's scheduling
// parameters, perferred executors, and the service's scheduling policies.
//
// The main function of this service is accomplished through a continuously running Asynchronous task.
@Service
public class IIoTJobServiceService {
    @Autowired
    RedfishObjectRepository objectRepository;

    @Autowired
    RedfishErrorResponseService errorResponseService;
    

    // SubmitNewJob
    // This method is called by the SubmitJob action of a JobDocument resource.  The service is expected to
    // validate the request by making sure that there is at least one executor that can run the job, then create the
    // new job.
    // When the job is run will be dependent upon the policies of the Job Service.
    //
    // parameters - the runtime parameters to use for the job
    // uri - the URI that was used when invoking the action
    // request - the http request that invoked the action
    public ResponseEntity<?> submitNewJob(RedfishObject parameters, String uri, HttpServletRequest request) {
        // on success, return a 201 (created) response with the location of the newly created task
        // specified with a LOCATION header.
        RedfishError msg = errorResponseService.getErrorMessage("Base","Success", new ArrayList<>(), new ArrayList<>());
        return ResponseEntity
                .status(HttpStatus.CREATED)
                .contentType(MediaType.APPLICATION_JSON)
                .header("Location","/dummy.url.com")
                .body(msg);
    }


}
