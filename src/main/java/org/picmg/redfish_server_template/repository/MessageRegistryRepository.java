//******************************************************************************************************
// MessageRegistryRepository.java
//
// Interface for MessageRegistryRepository.
//
//Copyright (C) 2022, PICMG.
//
//        This program is free software: you can redistribute it and/or modify
//        it under the terms of the GNU General Public License as published by
//        the Free Software Foundation, either version 3 of the License, or
//        (at your option) any later version.
//
//        This program is distributed in the hope that it will be useful,
//        but WITHOUT ANY WARRANTY; without even the implied warranty of
//        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//        GNU General Public License for more details.
//
//        You should have received a copy of the GNU General Public License
//        along with this program.  If not, see <https://www.gnu.org/licenses/>.
//*******************************************************************************************************


package org.picmg.redfish_server_template.repository;

import org.bson.Document;
import org.picmg.redfish_server_template.RFmodels.Autogenerated.MessageRegistry_MessageRegistry;
import org.picmg.redfish_server_template.RFmodels.custom.RedfishCollection;
import org.picmg.redfish_server_template.RFmodels.custom.RedfishObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.CriteriaDefinition;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;

@Component
public class MessageRegistryRepository {
    @Autowired
    MongoTemplate mongoTemplate;

    public List<MessageRegistry_MessageRegistry> findAll() {
        return mongoTemplate.findAll(MessageRegistry_MessageRegistry.class);
    }

    public List<Document> findWithQuery(CriteriaDefinition defs) {
        Query query = new Query();
        query.addCriteria(defs);
        return mongoTemplate.find(query, Document.class, "MessageRegistry");
    }

    public Document findFirstWithQuery(CriteriaDefinition defs) {
        Query query = new Query();
        query.addCriteria(defs);
        return mongoTemplate.findOne(query, Document.class, "MessageRegistry");
    }

    public List<String> getMessagesInRegistry(String registryPrefix) {
        List<String> result = new ArrayList<>();
        Document registry = findFirstWithQuery(Criteria.where("RegistryPrefix").is(registryPrefix));
        if (registry.containsKey("Messages")) {
            try {
                Document messages = (Document)registry.get("Messages");
                for (String msg: messages.keySet()) {
                    result.add(registryPrefix+"."+msg);
                }
            } catch (Exception ignoredException) {
                return result;
            }
        }
        return result;
    }
}